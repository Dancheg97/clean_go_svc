// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: sqlc.sql

package sqlc

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (name, age)
VALUES ($1, $2)
RETURNING id
`

type InsertUserParams struct {
	Name string
	Age  int32
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Name, arg.Age)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const selectUser = `-- name: SelectUser :one
SELECT name,
    age
FROM users
WHERE id = $1
`

type SelectUserRow struct {
	Name string
	Age  int32
}

func (q *Queries) SelectUser(ctx context.Context, id int32) (SelectUserRow, error) {
	row := q.db.QueryRow(ctx, selectUser, id)
	var i SelectUserRow
	err := row.Scan(&i.Name, &i.Age)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2,
    age = $3
WHERE id = $1
`

type UpdateUserParams struct {
	ID   int32
	Name string
	Age  int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.ID, arg.Name, arg.Age)
	return err
}
